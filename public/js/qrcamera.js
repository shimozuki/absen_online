
                                let selectedDeviceId = null;
                                const codeReader = new ZXing.BrowserMultiFormatReader();
                                const sourceSelect = $("#pilihKamera");

                                $(document).on('change', '#pilihKamera', function() {
                                    selectedDeviceId = $(this).val();
                                    if (codeReader) {
                                        codeReader.reset()
                                        initScanner()
                                    }
                                })

                                function initScanner() {
                                    codeReader
                                        .listVideoInputDevices()
                                        .then(videoInputDevices => {
                                            videoInputDevices.forEach(device =>
                                                console.log(`${device.label}, ${device.deviceId}`)
                                            );

                                            if (videoInputDevices.length > 0) {

                                                if (selectedDeviceId == null) {
                                                    if (videoInputDevices.length > 1) {
                                                        selectedDeviceId = videoInputDevices[0].deviceId
                                                    } else {
                                                        selectedDeviceId = videoInputDevices[1].deviceId
                                                    }
                                                }


                                                if (videoInputDevices.length >= 1) {
                                                    sourceSelect.html('');
                                                    videoInputDevices.forEach((element) => {
                                                        const sourceOption = document.createElement('option')
                                                        sourceOption.text = element.label
                                                        sourceOption.value = element.deviceId
                                                        if (element.deviceId == selectedDeviceId) {
                                                            sourceOption.selected = 'selected';
                                                        }
                                                        sourceSelect.append(sourceOption)
                                                    })

                                                }

                                                function decodeQRCode() {
                                                    codeReader
                                                        .decodeOnceFromVideoDevice(selectedDeviceId, 'previewKamera')
                                                        .then(result => {
                                                            console.log(result.text);
                                                            $("#hasilscan").val(result.text);
                                                            var snd = new Audio(
                                                                "data:audio/mpeg;base64,
                                                            );
                                                            snd.play();
                                                            // Lakukan permintaan AJAX setelah pemindaian berhasil
                                                            $.ajax({
                                                                url: '/scan-qr/' + encodeURIComponent(result.text),
                                                                method: 'get',
                                                                success: function(response) {
                                                                    // Aksi setelah permintaan AJAX berhasil
                                                                    var successMessage = document.createElement("div");
                                                                    successMessage.className = "alert alert-success";
                                                                    successMessage.textContent = "Absensi berhasil. Silahkan masuk ke kelas kamu.";
                                                                    document.getElementById("messageContainer").appendChild(
                                                                        successMessage);
                                                                    setTimeout(function() {
                                                                        successMessage.remove();
                                                                    }, 5000);
                                                                },
                                                                error: function(xhr, status, error) {
                                                                    // Aksi jika terjadi kesalahan dalam permintaan AJAX
                                                                    var errorMessage = document.createElement("div");
                                                                    errorMessage.className = "alert alert-danger";
                                                                    errorMessage.textContent = xhr.responseJSON.message;
                                                                    document.getElementById("messageContainer").appendChild(
                                                                        errorMessage);
                                                                    setTimeout(function() {
                                                                        errorMessage.remove();
                                                                    }, 5000);
                                                                }
                                                            });
                                                            setTimeout(decodeQRCode, 50); // Melanjutkan pemindaian setelah 1 detik
                                                        })
                                                        .catch(err => {
                                                            console.error(err);
                                                            setTimeout(decodeQRCode, 50); // Melanjutkan pemindaian setelah 1 detik
                                                        });
                                                }

                                                decodeQRCode(); // Memulai pemindaian QR kode

                                            } else {
                                                alert("Camera not found!")
                                            }
                                        })
                                        .catch(err => console.error(err));
                                }


                                if (navigator.mediaDevices) {


                                    initScanner()


                                } else {
                                    alert('Cannot access camera.');
                                }
                           